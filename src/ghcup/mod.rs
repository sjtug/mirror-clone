//! Ghcup source
//!
//! The mirroring of ghcup is split into four sources.
//!
//! `GhcupPackages` source provides a file list of all required packages for
//! ghcup hosted on haskell.org.
//! The snapshot is generated by parsing the latest ghcup version, fetch
//! its config, and capture all files located at downloads.haskell.org.
//! All item inside it is immutable.
//!
//! `GhcupConfig` fetches ghcup config.
//!
//! `GhcupScript` fetches ghcup installation script.
//!
//! It's recommended to mirror HLS packages using `GithubRelease` source.
//!
//! Do not forget to apply rewrite_pipe to `GhcupConfig` and `GhcupScript`.
//! You may want to merge three (or four) sources into one using `MergePipe`.

use structopt::StructOpt;

use crate::ghcup::packages::GhcupPackages;
use crate::ghcup::script::GhcupScript;
use crate::ghcup::yaml::GhcupYaml;

mod packages;
mod parser;
mod script;
mod utils;
mod yaml;

#[derive(Debug, Clone, StructOpt)]
pub struct Ghcup {
    #[structopt(
        long,
        help = "Ghcup upstream",
        default_value = "https://gitlab.haskell.org/haskell/ghcup-hs/-/raw/master/"
    )]
    pub ghcup_base: String,
    #[structopt(long, default_value = "https://get-ghcup.haskell.org/")]
    pub script_url: String,
    #[structopt(long, help = "Include legacy versions of packages")]
    pub include_old_versions: bool,
    #[structopt(long, help = "mirror url for packages")]
    pub target_mirror: String,
    #[structopt(long, help = "Stack versions to retain", default_value = "3")]
    pub retain_stack_versions: usize,
    #[structopt(long, help = "Hls versions to retain", default_value = "3")]
    pub retain_hls_versions: usize,
    #[structopt(long, default_value = "ghcup-0.0.4.yaml")]
    pub additional_yaml: Vec<String>,
}

impl Ghcup {
    pub fn get_script(&self) -> GhcupScript {
        GhcupScript {
            script_url: self.script_url.clone(),
        }
    }
    pub fn get_yaml(&self) -> GhcupYaml {
        GhcupYaml {
            ghcup_base: self.ghcup_base.clone(),
            additional_yaml: self.additional_yaml.clone(),
        }
    }
    pub fn get_packages(&self) -> GhcupPackages {
        GhcupPackages {
            ghcup_base: self.ghcup_base.clone(),
            include_old_versions: self.include_old_versions,
        }
    }
}
